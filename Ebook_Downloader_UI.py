# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\Ebook Downloader.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from twisted.internet import reactor, defer
import scrapy
from scrapy.crawler import CrawlerRunner
from scrapy.utils.project import get_project_settings
from multiprocessing import Process, Queue
from Ebook_Downloader_Scraper.Ebook_Downloader_Scraper.spiders.ebookscraper import EbookScraper
import json

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bookNameLabel = QtWidgets.QLabel(self.centralwidget)
        self.bookNameLabel.setGeometry(QtCore.QRect(40, 70, 71, 31))
        self.bookNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.bookNameLabel.setObjectName("bookNameLabel")
        self.bookNameTextbox = QtWidgets.QLineEdit(self.centralwidget)
        self.bookNameTextbox.setGeometry(QtCore.QRect(130, 70, 651, 22))
        self.bookNameTextbox.setObjectName("bookNameTextbox")
        self.authorNameLabel = QtWidgets.QLabel(self.centralwidget)
        self.authorNameLabel.setGeometry(QtCore.QRect(30, 120, 81, 41))
        self.authorNameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.authorNameLabel.setObjectName("authorNameLabel")
        self.authorNameTextbox = QtWidgets.QLineEdit(self.centralwidget)
        self.authorNameTextbox.setGeometry(QtCore.QRect(130, 120, 651, 22))
        self.authorNameTextbox.setObjectName("authorNameTextbox")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(330, 230, 121, 61))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.fetch)
        self.error_dialog = QtWidgets.QErrorMessage()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EBook Downloader"))
        self.bookNameLabel.setText(_translate("MainWindow", "Book Name"))
        self.authorNameLabel.setText(_translate("MainWindow", "Author Name"))
        self.pushButton.setText(_translate("MainWindow", "Fetch"))

    
    def fetch(self):
        bookName = self.bookNameTextbox.text()
        authorName = self.authorNameTextbox.text()
        begin(bookName, authorName)
    
    def show_error(self, msg):
        self.error_dialog.showMessage(msg)


def run(q, bookName, authorName):
    try:
        custom_settings={
            'FEEDS':{
                'result.json':{'format':'json',
                                'overwrite':True}
            }
        }
        runner = CrawlerRunner(custom_settings)
        deferred = runner.crawl(EbookScraper, author_name=authorName, book_name=bookName)
        deferred.addBoth(lambda _: reactor.stop())
        reactor.run()
        q.put(None)
    except Exception as e:
        q.put(e)

def begin(bookName, authorName):
    print('Fetching ', bookName)
    q = Queue()
    p = Process(target=run, args=(q,bookName,authorName))
    p.start()
    result = q.get()
    p.join() 
    if result is not None:
        raise result
